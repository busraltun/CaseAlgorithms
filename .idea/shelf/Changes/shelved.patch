Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1649529021498)
+++ b/.idea/vcs.xml	(date 1649529021498)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/description.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/description.html b/.idea/description.html
new file mode 100644
--- /dev/null	(date 1649100814118)
+++ b/.idea/description.html	(date 1649100814118)
@@ -0,0 +1,1 @@
+<html>Simple <b>Java</b> application that includes a class with <code>main()</code> method</html>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1649100844530)
+++ b/.idea/modules.xml	(date 1649100844530)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/CaseAlgorithms.iml" filepath="$PROJECT_DIR$/CaseAlgorithms.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/project-template.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project-template.xml b/.idea/project-template.xml
new file mode 100644
--- /dev/null	(date 1649100814186)
+++ b/.idea/project-template.xml	(date 1649100814186)
@@ -0,0 +1,3 @@
+<template>
+  <input-field default="com.company">IJ_BASE_PACKAGE</input-field>
+</template>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1649100845374)
+++ b/.idea/encodings.xml	(date 1649100845374)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="PROJECT" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1649100884826)
+++ b/.idea/.gitignore	(date 1649100884826)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1649100845157)
+++ b/.idea/misc.xml	(date 1649100845157)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="ProjectKey">
+    <option name="state" value="project://e2804f05-5315-4fc6-a121-c522a6c26470" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: CaseAlgorithms.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CaseAlgorithms.iml b/CaseAlgorithms.iml
new file mode 100644
--- /dev/null	(date 1649100844233)
+++ b/CaseAlgorithms.iml	(date 1649100844233)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/com/company/Answer1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Answer1.java b/src/com/company/Answer1.java
new file mode 100644
--- /dev/null	(date 1649515177352)
+++ b/src/com/company/Answer1.java	(date 1649515177352)
@@ -0,0 +1,54 @@
+package com.company;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class Answer1 {
+    public static void main(String[] args) {
+        ArrayList<String> arrayWords = new ArrayList<String>(
+                Arrays.asList("aaaasd", "a", "aab", "aaabcd", "ef", "cssssssd", "fdz", "kf", "zc", "lklklklklklklklkl", "l")
+        );
+        Collections.sort(arrayWords);
+        // System.out.println(arrayWords);
+        ArrayList<String> foundWords = new ArrayList<String>();
+        ArrayList<String> notFoundWords = new ArrayList<String>();
+
+        int number = 0, counterFound = 0, counterNotFound = 0, counterLetter = 0, index = 0, maxLetter = 0;
+        for (int i = 0; i < arrayWords.size(); i++){
+            String words = arrayWords.get(i);
+
+            for (int j = 0; j < words.length(); j++) {
+                if (words.charAt(j) == 'a'){
+                    counterFound++;
+                    //System.out.println("FOUND : " + arrayWords.get(i));
+                    foundWords.addAll(Collections.singleton(words));
+                    foundWords.sort((first, second) -> Integer.compare(second.length(), first.length()));
+                    break;
+                }
+                else if(words.charAt(j) != 'a'){
+                    counterNotFound++;
+                    //System.out.println( "NOT FOUND: " + words);
+                    notFoundWords.addAll(Collections.singleton(words));
+                    notFoundWords.sort((first, second) -> Integer.compare(second.length(), first.length()));
+                    break;
+                }
+            }
+
+        }
+
+        List<String> orderWords = Stream.of(foundWords, notFoundWords)
+                .flatMap(x -> x.stream())
+                .collect(Collectors.toList());
+        System.out.println("ORDER WORDS : " + orderWords);
+       /* System.out.println( "FOUND WORDS : " + foundWords);
+        System.out.println("NOT FOUND : " + notFoundWords);
+        System.out.println(counterFound + " tane kelimede a var ");
+        System.out.println(counterNotFound + " tane kelimede a yok ");
+        System.out.println(arrayWords); */
+    }
+}
+
Index: src/com/company/Answer3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Answer3.java b/src/com/company/Answer3.java
new file mode 100644
--- /dev/null	(date 1649517097007)
+++ b/src/com/company/Answer3.java	(date 1649517097007)
@@ -0,0 +1,44 @@
+package com.company;//Java program to find the most frequent element
+//in an array
+
+import java.util.*;
+
+public class Answer3 {
+    public static String repetitiveWord(ArrayList<String> arrayWords) {
+        HashMap<String, Integer> store = new HashMap<String, Integer>(); //String for word, Integer for to find out how many
+        for (int i = 0; i < arrayWords.size(); i++) {
+            if(store.containsKey(arrayWords.get(i))) {
+
+                store.put(arrayWords.get(i), store.get(arrayWords.get(i)) + 1);
+            }
+
+            else {
+                store.put(arrayWords.get(i), 1);
+            }
+        }
+
+        Set<Map.Entry<String, Integer> > set = store.entrySet();
+        String key = "";
+        int value = 0;
+
+        for (Map.Entry<String, Integer> me : set) {
+            if (me.getValue() > value) {
+                value = me.getValue();
+                key = me.getKey();
+            }
+        }
+        return key;
+    }
+
+        public static void main(String[] args){
+            ArrayList<String> arrayWords = new ArrayList<String>(
+                    Arrays.asList("apple","pie","apple","red","red","red")
+            );
+
+            String sol = repetitiveWord(arrayWords);
+            System.out.println(sol);
+
+
+        }
+}
+
Index: src/com/company/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Main.java b/src/com/company/Main.java
new file mode 100644
--- /dev/null	(date 1649515177427)
+++ b/src/com/company/Main.java	(date 1649515177427)
@@ -0,0 +1,15 @@
+package com.company;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class Main {
+    public static void main(String[] args) {
+
+    }
+}
+
Index: src/com/company/Answer2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Answer2.java b/src/com/company/Answer2.java
new file mode 100644
--- /dev/null	(date 1649527150063)
+++ b/src/com/company/Answer2.java	(date 1649527150063)
@@ -0,0 +1,48 @@
+package com.company;
+
+import java.util.Scanner;
+public class Answer2
+{
+    //Algorithm is main : Is the number a perfect square
+    static boolean checkPerfectSquare(double number)
+    {
+        for (int i=1; i*i<=number; i++)
+        {
+//if (i * i = number)
+//comparing conditions using logical AND
+            if((number%i==0) && (number/i==i))
+            {
+//returns true if both conditions are true
+                return true;
+            }
+        }
+//returns false if any one condition is false
+        return false;
+    }
+    //main method
+    public static void main(String[] args)
+    {
+        System.out.print("Enter number: ");
+        Scanner reader =new Scanner(System.in);
+        int number = reader.nextInt();
+
+        if(number > 0) {
+            for (int i = 0 ; i <= number; i++)
+            {
+                if (i == 2 || checkPerfectSquare(i) && i != 1)
+                {
+                    System.out.println(i);
+                }
+
+                //break;
+            }
+        }
+
+        else if(number < 0) {
+            System.out.println("This is negative.Please again try");
+        }
+        else {
+            System.out.println("This is zero.Please again try");
+        }
+    }
+}  
\ No newline at end of file
